# TODO externalize sql and have a common insert

#from pdsutil.Dexterity import Dexterity  # TODO why
from pdsutil.DbUtil import CursorHelper, SqlStatements
import logging
import os

# TODO CHANGE ALL DT to YYYYMMDD
# TODO ADD FIELD VALIDATORS
# TODO SHARE TABLE TAGS
# TODO

# http://stackoverflow.com/questions/4263508/question-about-postgresql-bind-variables
# TODO note difference
conn = None
#dexterity = Dexterity()

# TODO !!! user CursorHelper to catch and report exceptions

logger = logging.getLogger(__name__)

def get_file_path(file_name):
    fdir = os.path.dirname(os.path.realpath(__file__))
    return os.path.join(fdir, file_name)

class EtlPersistence():
    def __init__(self,connection):
        self.connection = connection
        yaml_file_name = get_file_path("../config/etl_persistence_sql.yaml")
        self.statements = SqlStatements.from_yaml(yaml_file_name).statements







    def get_all_rows(cursor):  # TODO  put on CursorHelper
        # TODO move to a util package
        ##
        #  Returns a list of dictionaries
        #  each list entry corresponds to one row
        #  each row is keyed by column name or alias per select statement
        rows = []
        columns = [i[0] for i in cursor.description]
        column_list = []
        for row in cursor:
            rows.append(dict(zip(columns, row)))
        print("returning " + str(rows))
        return rows


    def etl_customer_insert(self,binds):
        sql = self.statements["etl_customer_insert"]["sql"]
        CursorHelper(conn.cursor()).execute(sql, binds)


    def initial_insert(self, binds):
        etl_file_initial_insert = self.statements["etl_file_initial_insert"]["sql"]
        returning = self.statements["etl_file_initial_insert"]["returning"]

        org_sql = "select org_id from org where org_cd = %(ORG_CD)s";

        ##  inserts a row in the org table
        ##  returns the primary key of the inserted record
        rows = CursorHelper(conn.cursor()).execute(org_sql, binds)
        org_id = None
        row_found = False
        for row in rows:
            row_found = True  # TODO must be a better way
            org_id = row[0]
        if not row_found:
            raise Exception("no data found for " + str(binds) + " in " + org_sql)  # TODO standard

        etl_file_id = CursorHelper(conn.cursor()).execute(etl_file_initial_insert, binds, returning=returning)  # TODO note Returning!

        logger.info("returning etl_file_id " + str(etl_file_id))
        return etl_file_id

    def insert(self,statement_name,binds):
        sql = self.statements[statement_name]["sql"]
        CursorHelper(conn.cursor()).execute(sql, binds)

    def etl_sale_insert(self,binds):
        self.insert("etl_sale_tot_insert",binds)

    def etl_inventory_insert(self,binds):
        self.insert("etl_inventory_insert")

    def etl_inventory_tot_insert(self,binds):
        self.insert("etl_inventory_tot_insert")


    def etl_sale_insert(self,binds):
        self.insert["etl_sale_insert"]


    def etl_customer_tot_insert(self,binds):
        self.insert["etl_customer_tot_insert"]
