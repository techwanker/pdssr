# TODO externalize sql and have a common insert
# TODO common connection classodo
from pdsutil.Dexterity import Dexterity

# TODO CHANGE ALL DT to YYYYMMDD
# TODO ADD FIELD VALIDATORS
# TODO SHARE TABLE TAGS
# TODO

conn = None
dexterity = Dexterity()


def commit():
    response = conn.commit()  # This should probably be migrated out


def get_all_rows(cursor):
    # TODO move to a util package
    ##
    #  Returns a list of dictionaries
    #  each list entry corresponds to one row
    #  each row is keyed by column name or alias per select statement
    rows = []
    columns = [i[0] for i in cursor.description]
    column_list = []
    for row in cursor:
        rows.append(dict(zip(columns, row)))
    print ("returning " + str(rows))
    return rows


class Customer:
    def __init__(self, connection):
        self.connection = connection

    insert_cursor = None
    customer_insert = """
    insert into CUSTOMER (
        CUSTOMER_ID
    ) values (
        :CUSTOMER_ID
    )"""

    def insert(self, binds):
        insert_cursor.execute(self.customer_insert, binds)


class EtlCustomer:
    etl_customer_insert = """
    insert into ETL_CUSTOMER (
        ETL_FILE_ID, SHIP_TO_CUST_ID, CUST_NM,
        ADDR_1, ADDR_2, CITY, STATE,
        POSTAL_CD, TEL_NBR, NATIONAL_ACCT_ID,
        SPECIAL_FLG
    ) values (
        :ETL_FILE_ID, :SHIP_TO_CUST_ID, :CUST_NM,
        :ADDR_1, :ADDR_2, :CITY, :STATE,
        :POSTAL_CD, :TEL_NBR, :NATIONAL_ACCT_ID,
        :SPECIAL_FLG
    )"""

    def insert(this, binds):
        try:
            conn.cursor().execute(this.etl_customer_insert, binds)
        except Exception as e:
            dexterity.sql_exception(this.etl_customer_insert, binds, e)


class EtlFile:
    etl_file_initial_insert = """
       insert into ETL_FILE ( RPT_ORG_ID, DATAFEED_ORG_ID)
       select org_id, org_id from org
       where org_cd = :ORG_CD """

    def initial_insert(self, binds):

        org_sql = "select org_id from org where org_cd = :ORG_CD";

        ##  inserts a row in the org table
        ##  returns the primary key of the inserted record

        cursor = conn.cursor()
        rows = cursor.execute(org_sql, binds);
        org_id = None
        row_found = False
        for row in rows:
            row_found = True  # TODO must be a better way
            org_id = row[0]

            break  # TODO this is inelegant and how do I count rows

        try:
            cursor.execute(self.etl_file_initial_insert, binds)
            etl_file_id = cursor.lastrowid
            # print "etl_file_id is " + str(etl_file_id)
        except Exception as e:
            dexterity.sql_exception(self.etl_file_initial_insert, binds, e)
        return etl_file_id


class EtlSalesTot:
    etl_sale_tot_insert = """
      insert into etl_sale_tot
      (
         ETL_FILE_ID, SALES_START_DT,
         SALES_END_DT,
         FILE_CREATE_DT, SALES_REC_CNT, SUM_EXT_NET_AMT
      )
      values
      (
         :ETL_FILE_ID, :SALES_START_DT,
         :SALES_END_DT, :FILE_CREATE_DT, :SALES_REC_CNT,
         :SUM_EXT_NET_AMT
      )"""

    def insert(self, binds):
        raise Exception( "not supported")
        # raise Exception("not supported")


class EtlInventory:
    etl_inventory_insert = """
    insert into ETL_INVENTORY (
        ETL_FILE_ID, DISTRIBUTOR_ID, MFR_ID,
        MFR_PRODUCT_ID, COMMENTS, CASES,
        BOXES, UNITS, CASE_GTIN
    ) values (
        :ETL_FILE_ID, :DISTRIBUTOR_ID, :MFR_ID,
        :MFR_PRODUCT_ID, :COMMENTS, :CASES,
        :BOXES, :UNITS, :CASE_GTIN
    )"""

    insert_cursor = None

    def insert(self, binds):
        insert_cursor = conn.cursor()
        try:
            insert_cursor.execute(self.etl_inventory_insert, binds)
        except Exception as e:
            dexterity.sql_exception(self.etl_inventory_insert,
                                    binds, e)


class EtlInventoryTot:
    etl_inventory_tot_insert = """
    insert into ETL_INVENTORY_TOT (
        ETL_FILE_ID,
        INVENTORY_DT, FILE_CREATION_DT, RECORD_CNT_REPORTED
    ) values (
        :ETL_FILE_ID,
        :INVENTORY_DT, :FILE_CREATION_DT, :RECORD_CNT_REPORTED
    )"""

    def insert(self, binds):

        insert_cursor = conn.cursor()  # TODO need a pool of these things
        try:
            insert_cursor.execute(self.etl_inventory_tot_insert, binds)
        except Exception as e:
            dexterity.sql_exception(self.etl_inventory_tot_insert,
                                    binds, e)


class EtlSale:
    etl_sale_insert = """
    insert into ETL_SALE (
        ETL_FILE_ID, DISTRIB_ID, MFR_ID,
        MFR_PRODUCT_ID, SHIP_TO_CUST_ID, INVOICE_CD, INVOICE_DT,
        SHIP_DT, EXTENDED_NET_AMT,
        /* CURR_CD, */
        DISTRIB_PROD_REF,
        PRODUCT_DESCR, CASES_SHIPPED, BOXES_SHIPPED, UNITS_SHIPPED,
        CASE_GTIN
    ) values (
        :ETL_FILE_ID, :DISTRIB_ID, :MFR_ID,
        :MFR_PRODUCT_ID, :SHIP_TO_CUST_ID, :INVOICE_CD, :INVOICE_DT,
        :SHIP_DT, :EXTENDED_NET_AMT,
        /* :CURR_CD, */
        :DISTRIB_PROD_REF,
        :PRODUCT_DESCR, :CASES_SHIPPED, :BOXES_SHIPPED, :UNITS_SHIPPED,
        :CASE_GTIN
    )"""

    def insert(self, binds):
        insert_cursor = conn.cursor()
        try:
            insert_cursor.execute(self.etl_sale_insert, binds)
        except Exception as e:
            dexterity.sql_exception(self.etl_file_initial_insert,
                                    binds, e)


class OrgDatafeed:
    org_datafeed_insert = """
    insert into ORG_DATAFEED (
        ORG_ID
    ) select
          org_id from org where org_cd = :org_cd
    """

    insert_cursor = None
    new_id = None

    def insert(self, org_cd):
        binds = {"org_cd": org_cd}
        try:
            conn.cursor().execute(self.org_datafeed_insert, binds)
        except Exception as e:
            dexterity.sql_exception(self.rg_datafeed_insert,
                                    binds, e)


class EtlCustomerTot:
    etl_customer_tot_insert = """
    insert into etl_customer_tot( etl_file_id, customer_count)
    values ( :ETL_FILE_ID, :CUSTOMER_COUNT)"""

    def insert(self, binds):
        try:
            conn.cursor().execute(self.etl_customer_tot_insert, binds)
        except Exception as e:
            dexterity.sql_exception(self.etl_customer_tot_insert,
                                    binds, e)


# class Org:
#     ##
#     # persistence class for org table
#     #
#     org_insert = """
#         insert into ORG  ( ORG_CD, ORG_NM)
#         values (:ORG_CD, :ORG_NM)"""
#     insert_cursor = None
#     new_id = None
#
#     def insert(this, binds):
#         ##
#         #  inserts a row in the org table
#         #  returns the primary key of the inserted record
#         binds["new_id"] = new_id
#         conn.cursor().execute(this.insert, binds)
#
#     def get_for_org_cd(self, org_cd):
#         select_for_org_cd = """
#         select org_id, org_cd, org_nm
#         from org
#         where org_cd = :ORG_CD"""
#
#         binds = {"ORG_CD": org_cd}

        conn.cursor().execute(select_for_org_cd, binds)

        return get_all_rows(get_for_org_cd_cursor)  # TODO
