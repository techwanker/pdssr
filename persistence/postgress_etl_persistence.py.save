# TODO externalize sql and have a common insert

from pdsutil.Dexterity import Dexterity  # TODO why
from pdsutil.DbUtil import CursorHelper

# TODO CHANGE ALL DT to YYYYMMDD
# TODO ADD FIELD VALIDATORS
# TODO SHARE TABLE TAGS
# TODO

# http://stackoverflow.com/questions/4263508/question-about-postgresql-bind-variables
# TODO note difference
conn = None
dexterity = Dexterity()

#TODO !!! user CursorHelper to catch and report exceptions

def commit():
    response = conn.commit()  # This should probably be migrated out

def get_all_rows(cursor):  #TODO  put on CursorHelper
    # TODO move to a util package
    ##
    #  Returns a list of dictionaries
    #  each list entry corresponds to one row
    #  each row is keyed by column name or alias per select statement
    rows = []
    columns = [i[0] for i in cursor.description]
    column_list = []
    for row in cursor:
        rows.append(dict(zip(columns, row)))
    print ("returning " + str(rows))
    return rows


class Customer:
    def __init__(self, connection):
        self.connection = connection

    insert_cursor = None
    customer_insert = """
    insert into CUSTOMER (
        CUSTOMER_ID
    ) values (
        :CUSTOMER_ID
    )"""

    def insert(self, binds):
        if self.insert_cursor is None:
            self.insert_cursor = CursorHelper(self.connection.cursor())
        self.insert_cursor.execute(self.customer_insert, binds)


class EtlCustomer:
    etl_customer_insert = """
    insert into ETL_CUSTOMER (
        ETL_FILE_ID, LINE_NUMBER, SHIP_TO_CUST_ID, CUST_NM,
        ADDR_1, ADDR_2, CITY, STATE,
        POSTAL_CD, TEL_NBR, NATIONAL_ACCT_ID,
        SPECIAL_FLG
    ) values (
        %(ETL_FILE_ID)s, %(LINE_NUMBER)s, %(SHIP_TO_CUST_ID)s, %(CUST_NM)s,
        %(ADDR_1)s, %(ADDR_2)s, %(CITY)s, %(STATE)s,
        %(POSTAL_CD)s, %(TEL_NBR)s, %(NATIONAL_ACCT_ID)s,
        %(SPECIAL_FLG)s
    )"""

    def insert(this, binds):
        try:
            conn.cursor().execute(this.etl_customer_insert, binds)
        except Exception as e:
            dexterity.sql_exception(this.etl_customer_insert, binds, e)


class EtlFile:
    etl_file_initial_insert = """
       insert into ETL_FILE ( RPT_ORG_ID, DATAFEED_ORG_ID)
       select org_id, org_id from org
       where org_cd = %(ORG_CD)s returning etl_file_id"""

    def initial_insert(self, binds):

        org_sql = "select org_id from org where org_cd = %(ORG_CD)s";

        ##  inserts a row in the org table
        ##  returns the primary key of the inserted record
        cursor = conn.cursor()
        cursor.execute(org_sql, binds);
        org_id = None
        row_found = False
        for row in cursor:
            row_found = True  # TODO must be a better way
            org_id = row[0]
            break  # TODO this is inelegant and how do I count rows
        if not row_found:
            raise Exception("no data found for " + str(binds) + " in " + org_sql)  # TODO standard
        try:
            cursor.execute(self.etl_file_initial_insert, binds)  # TODO note Returning!
            for row in cursor:
                etl_file_id = row[0]
        except Exception as e:
            dexterity.sql_exception(self.etl_file_initial_insert, binds, e)
        print ("returning etl_file_id " + str(etl_file_id))
        return etl_file_id


class EtlSalesTot:
    etl_sale_tot_insert = """
      insert into etl_sale_tot
      (
         ETL_FILE_ID, LINE_NUMBER
         SALES_START_DT,
         SALES_END_DT,
         FILE_CREATE_DT, SALES_REC_CNT, SUM_EXT_NET_AMT
      )
      values
      (
         %(ETL_FILE_ID)s, %(LINE_NUMBER)s
         %(SALES_START_DT)s,
         %(SALES_END_DT)s, %(FILE_CREATE_DT)s, %(SALES_REC_CNT)s,
         %(SUM_EXT_NET_AMT)s
      )"""

    def insert(self, binds):
        print ("not supported")  # TODO
        # raise Exception("not supported")


class EtlInventory:
    etl_inventory_insert = """
    insert into ETL_INVENTORY (
        ETL_FILE_ID, LINE_NUMBER,
         DISTRIBUTOR_ID, MFR_ID,
        MFR_PRODUCT_ID, COMMENTS, CASES,
        BOXES, UNITS, CASE_GTIN
    ) values (
        %(ETL_FILE_ID)s, %(LINE_NUMBER),
        %(DISTRIBUTOR_ID)s, %(MFR_ID)s,
        %(MFR_PRODUCT_ID)s, %(COMMENTS)s, %(CASES)s,
        %(BOXES)s, %(UNITS)s, %(CASE_GTIN)s
    )"""

    insert_cursor = None

    def insert(self, binds):
        insert_cursor = conn.cursor()
        try:
            insert_cursor.execute(self.etl_inventory_insert, binds)
        except Exception as e:
            dexterity.sql_exception(self.etl_inventory_insert,
                                    binds, e)


class EtlInventoryTot:
    etl_inventory_tot_insert = """
    insert into ETL_INVENTORY_TOT (
        ETL_FILE_ID, line_number,
        INVENTORY_DT, FILE_CREATION_DT, RECORD_CNT_REPORTED
    ) values (
        %(ETL_FILE_ID)s, %(LINE_NUMBER)s,
        %(INVENTORY_DT)s, %(FILE_CREATION_DT)s, %(RECORD_CNT_REPORTED)s
    )"""

    def insert(self, binds):

        insert_cursor = CursorHelper(conn.cursor())  # TODO need a pool of these things
        try:
            insert_cursor.execute(self.etl_inventory_tot_insert, binds)
        except Exception as e:
            dexterity.sql_exception(self.etl_inventory_tot_insert,
                                    binds, e)


class EtlSale:

    etl_sale_insert = """
        insert into ETL_SALE (
            ETL_FILE_ID, 
            LINE_NUMBER,
            DISTRIB_ID, MFR_ID,
            MFR_PRODUCT_ID, SHIP_TO_CUST_ID, INVOICE_CD, INVOICE_DT,
            SHIP_DT, EXTENDED_NET_AMT,
            DISTRIB_PRODUCT_REF,
            PRODUCT_DESCR, CASES_SHIPPED, BOXES_SHIPPED, UNITS_SHIPPED,
            CASE_GTIN
        ) values (
            %(ETL_FILE_ID)s, %(LINE_NUMBER)s,
            %(DISTRIB_ID)s, %(MFR_ID)s,
            %(MFR_PRODUCT_ID)s, %(SHIP_TO_CUST_ID)s, %(INVOICE_CD)s, %(INVOICE_DT)s,
            %(SHIP_DT)s, %(EXTENDED_NET_AMT)s,
            %(DISTRIB_PRODUCT_REF)s,
            %(PRODUCT_DESCR)s, %(CASES_SHIPPED)s, %(BOXES_SHIPPED)s, %(UNITS_SHIPPED)s,
            %(CASE_GTIN)s
        )"""

    def insert(self, binds):
        insert_cursor = conn.cursor()
        try:
            insert_cursor.execute(self.etl_sale_insert, binds)
        except Exception as e:
            print ("!!!!")
            print (e)
            print ("!!!!")  # TODO
            dexterity.sql_exception(self.etl_sale_insert,
                                    binds, e)


class OrgDatafeed:
    org_datafeed_insert = """
    insert into ORG_DATAFEED (
        ORG_ID
    ) select
          org_id from org where org_cd = %(ORG_CD)s 
    """

    insert_cursor = None
    new_id = None

    def insert(self, org_cd):
        binds = {"org_cd": org_cd}
        try:
            conn.cursor().execute(self.org_datafeed_insert, binds)
        except Exception as e:
            dexterity.sql_exception(self.rg_datafeed_insert,
                                    binds, e)


class EtlCustomerTot:
    etl_customer_tot_insert = """
    insert into etl_customer_tot( etl_file_id, line_number customer_count)
    values ( %(ETL_FILE_ID)s, %(LINE_NUMBER)s, %(CUSTOMER_COUNT)s"""

    def insert(self, binds):
        try:
            conn.cursor().execute(self.etl_customer_tot_insert, binds)
        except Exception as e:
            dexterity.sql_exception(self.etl_customer_tot_insert,
                                    binds, e)


# class Org:
#     ##
#     # persistence class for org table
#     #
#     org_insert = """
#         insert into ORG  ( ORG_CD, ORG_NM)
#         values (%(ORG_CD)s, %(ORG_NM)s"""
#     insert_cursor = None
#     new_id = None
#
#     def insert(this, binds):
#         ##
#         #  inserts a row in the org table
#         #  returns the primary key of the inserted record
#         binds["new_id"] = new_id
#         conn.cursor().execute(this.insert, binds) # ! TODO should be in return
#
#     # def get_for_org_cd(self, org_cd):
#     #     select_for_org_cd = """
#     #     select org_id, org_cd, org_nm
#     #     from org
#     #     where org_cd = %(ORG_CD)s"""
#     #
#     #     binds = {"ORG_CD": org_cd}
#     #
#     #     conn.cursor().execute(select_for_org_cd, binds)
#     #
#     #     return get_all_rows(get_for_org_cd_cursor)  # TODO !! get one
